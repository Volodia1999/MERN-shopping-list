{"version":3,"sources":["components/AppNavbar.jsx","actions/itemsAction.js","actions/actionTypes.js","components/ShoppingList.jsx","reducers/itemReducer.js","store.js","components/ItemModal.jsx","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","setState","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","className","NavItem","NavLink","React","Component","deleteItemSuccess","id","type","payload","addItemSuccess","newItem","ShoppingList","deleteAItem","props","deleteItem","getAllItems","items","item","Container","ListGroup","map","_id","name","ListGroupItem","key","Button","size","connect","dispatch","a","async","axios","get","response","data","delete","initialState","reducers","combineReducers","action","filter","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ItemModal","modal","onChange","e","target","value","saveItem","preventDefault","addItem","Modal","ModalHeader","ModalBody","Form","onSubmit","Label","htmlFor","Input","placeholder","block","post","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eeed0a49.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Navbar,\r\n    NavbarBrand,\r\n    NavbarToggler,\r\n    Collapse,\r\n    Nav,\r\n    NavItem,\r\n    NavLink\r\n} from 'reactstrap'\r\n\r\nclass AppNavbar extends React.Component {\r\n    state = {\r\n        isOpen: false\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color='dark' dark expand='md'>\r\n                    <NavbarBrand href='/'>ShoppingList</NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggle}/>\r\n                    <Collapse isOpen={this.state.isOpen} navbar>\r\n                        <Nav className='ml-auto' navbar>\r\n                            <NavItem>\r\n                                <NavLink href='https://github.com/Volodia1999'>Github</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppNavbar;\r\n","import {GET_ITEMS, DELETE_ITEM, ADD_ITEM} from \"./actionTypes\";\r\nimport axios from 'axios';\r\n\r\nconst getItemsSuccess = (items) => (\r\n    {\r\n        type: GET_ITEMS,\r\n        payload: items\r\n    }\r\n);\r\n\r\nconst deleteItemSuccess = (id) => (\r\n    {\r\n        type: DELETE_ITEM,\r\n        payload: id\r\n    }\r\n);\r\n\r\nexport const addItemSuccess = (newItem) => (\r\n    {\r\n        type: ADD_ITEM,\r\n        payload: newItem\r\n    }\r\n);\r\n\r\nexport const getAllItems = () => async (dispatch) => {\r\n    const response = await axios.get('/api/items');\r\n    dispatch(getItemsSuccess(response.data))\r\n};\r\n\r\nexport const deleteItem = (id) => async (dispatch) => {\r\n    await axios.delete(`/api/items/${id}`);\r\n    dispatch(deleteItemSuccess(id));\r\n};\r\n\r\nexport const addItem = (newItem) => async (dispatch) => {\r\n    const response = await axios.post('/api/items', newItem);\r\n    dispatch(addItemSuccess(response.data));\r\n};\r\n","export const GET_ITEMS = 'GET_ITEMS';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const ADD_ITEM = 'ADD_ITEM';\r\n","import React from 'react';\r\nimport {Container, Button, ListGroup, ListGroupItem} from 'reactstrap';\r\nimport {connect} from \"react-redux\";\r\nimport {deleteItem, getAllItems} from '../actions/itemsAction';\r\n\r\nclass ShoppingList extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getAllItems();\r\n    }\r\n\r\n    deleteAItem = (id) => {\r\n        this.props.deleteItem(id)\r\n    };\r\n\r\n    render() {\r\n        const {items} = this.props.item;\r\n        return(\r\n            <Container>\r\n                <ListGroup className='mt-3'>\r\n                    {items.map(({_id, name}) => ( // ({_id, name}) - destruction (item) = item._id, item.name\r\n                        <ListGroupItem key={_id}>\r\n                            <Button\r\n                                color='danger'\r\n                                className='mr-3'\r\n                                size='sm'\r\n                                onClick={() => this.deleteAItem(_id)}\r\n                            >&times;</Button>\r\n                            {name}\r\n                        </ListGroupItem>\r\n                    ))}\r\n                </ListGroup>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.items\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllItems, deleteItem})(ShoppingList);\r\n","import {GET_ITEMS, DELETE_ITEM, ADD_ITEM} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    items: []\r\n};\r\n\r\nexport const itemReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_ITEMS: {\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        }\r\n        case DELETE_ITEM: {\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload)\r\n            }\r\n        }\r\n        case ADD_ITEM: {\r\n            return {\r\n                ...state,\r\n                items: [action.payload, ...state.items]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {itemReducer} from \"./reducers/itemReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    items: itemReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunk)\r\n));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport {Button, Container, Form, Input, Label, Modal, ModalBody, ModalHeader} from \"reactstrap\";\r\nimport {connect} from 'react-redux';\r\nimport {addItem} from '../actions/itemsAction';\r\n\r\nclass ItemModal extends React.Component {\r\n    state = {\r\n        modal: false,\r\n        name: ''\r\n    };\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    saveItem = (e) => {\r\n        e.preventDefault();\r\n\r\n        const newItem = {\r\n            name: this.state.name\r\n        };\r\n\r\n        //Add item via action\r\n        this.props.addItem(newItem);\r\n\r\n        //close Modal\r\n        this.toggle();\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Button color='dark' className='mt-5' onClick={this.toggle}>\r\n                    Add Item\r\n                </Button>\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n                    <ModalHeader toggle={this.toggle}>\r\n                        Add new Item\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.saveItem}>\r\n                            <Label htmlFor='item'>Item</Label>\r\n                            <Input\r\n                                type='text'\r\n                                id='item'\r\n                                name='name'\r\n                                placeholder='Add new item'\r\n                                onChange={this.onChange}\r\n                            />\r\n                            <Button\r\n                                color='dark'\r\n                                className='mt-3'\r\n                                block>Add item</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {addItem})(ItemModal);\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport AppNavbar from './components/AppNavbar';\nimport ShoppingList from './components/ShoppingList';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport ItemModal from \"./components/ItemModal\";\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <AppNavbar/>\n            <ItemModal/>\n            <ShoppingList/>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}